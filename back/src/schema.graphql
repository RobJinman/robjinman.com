type Query {
  info: String!
  publishedArticles(tags: [String!], skip: Int, first: Int, filter: String): [Article!]!
  allArticles(skip: Int, first: Int): [Article!]!
  article(id: ID!): Article
  page(name: String!): Page
  pages: [Page!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  postArticle(title: String!, summary: String!, content: String!, tags: [String!]!): Article!
  updateArticle(id: ID!, title: String!, summary: String!, content: String!, tags: [String!]!): Article!
  publishArticle(id: ID!, publish: Boolean!): Article!
  deleteArticle(id: ID!): Article!
  postComment(articleId: ID!, content: String!): Comment!
  deleteComment(commentId: ID!): Comment
  postPage(name: String!, content: String!): Page!
  updatePage(name: String!, content: String!): Page!
  deletePage(name: String!): Page
}

type Subscription {
  newArticle: Article
  newComment: Comment
}

type Page {
  id: ID!
  name: String!
  content: String!
}

type Article {
  id: ID!
  draft: Boolean!
  createdAt: String!
  modifiedAt: String!
  publishedAt: String
  title: String!
  summary: String!
  content: String!
  tags: [String!]!
  comments: [Comment!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  comments: [Comment!]!
  admin: Boolean!
}

type Comment {
  id: ID!
  createdAt: String!
  content: String!
  user: User!
  article: Article!
}
