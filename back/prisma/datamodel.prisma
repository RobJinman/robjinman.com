type Article {
  id: ID! @unique
  draft: Boolean!
  createdAt: DateTime!
  modifiedAt: DateTime!
  publishedAt: DateTime
  title: String!
  summary: String!
  content: String!
  files: [File!]!
  tags: [String!]!
  comments: [Comment!]!
}

type Page {
  id: ID! @unique
  name: String! @unique
  content: String!
  files: [File]!
}

# Ideally, we would define an interface like this, which would be implemented
# by Page and Article, but Prisma doesn't support this yet.
#
# interface Document {
#   id: ID! @unique
#   content: String!
# }

type File {
  id: ID! @unique

  # Prisma doesn't support polymorphism through interfaces yet
  # document: Document!
  #
  # Instead, one of these will be null
  article: Article
  page: Page

  name: String!
  extension: String!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID! @unique
  createdAt: DateTime!
  name: String! @unique
  email: String! @unique
  pwHash: String!
  comments: [Comment!]!
}

type Comment {
  id: ID! @unique
  createdAt: DateTime!
  content: String!
  user: User!
  article: Article!
}
